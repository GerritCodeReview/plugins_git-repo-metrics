{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "7584eb6f_2979b279",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2025-04-10T12:45:22Z",
      "side": 1,
      "message": "```suggestion\n  [git-repo-metrics]\n       collectAllRepositories \u003d true\n```",
      "range": {
        "startLine": 16,
        "startChar": 2,
        "endLine": 16,
        "endChar": 50
      },
      "revId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7e35b15c_6519cdc4",
        "filename": "/COMMIT_MSG",
        "patchSetId": 3
      },
      "lineNbr": 16,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2025-04-11T20:04:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7584eb6f_2979b279",
      "range": {
        "startLine": 16,
        "startChar": 2,
        "endLine": 16,
        "endChar": 50
      },
      "revId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a642b0dd_4a340cb1",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2025-04-11T20:50:33Z",
      "side": 1,
      "message": "I am proposing a different approach here: https://gerrit-review.googlesource.com/c/plugins/git-repo-metrics/+/467263",
      "revId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d641be17_a72679c4",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/gitrepometrics/GitRepoMetricsCache.java",
        "patchSetId": 3
      },
      "lineNbr": 147,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2025-04-10T19:48:25Z",
      "side": 1,
      "message": "This is expensive and unnecessary.\n\nIf `collectAllRepositories \u003d true` then you should just return `true` at the very beginning of the `shouldCollectStats()` method and not being bothered in listing *all the repositories* for then executing a contain on them.\n\nLarge setups could have tens of thousands of repos (e.g. GerritHub.io) and fetching all of them and looking for a contain every single time is very expensive.",
      "range": {
        "startLine": 147,
        "startChar": 11,
        "endLine": 147,
        "endChar": 38
      },
      "revId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "dc767231_79811d65",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/gitrepometrics/GitRepoMetricsCache.java",
        "patchSetId": 3
      },
      "lineNbr": 147,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2025-04-11T20:04:02Z",
      "side": 1,
      "message": "Good shout!\nI won\u0027t go to the beginning of the",
      "parentUuid": "d641be17_a72679c4",
      "range": {
        "startLine": 147,
        "startChar": 11,
        "endLine": 147,
        "endChar": 38
      },
      "revId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e9f01c49_d2b076c4",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/gitrepometrics/GitRepoMetricsCache.java",
        "patchSetId": 3
      },
      "lineNbr": 147,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2025-04-11T20:04:02Z",
      "side": 1,
      "message": "Good shout!\nI won\u0027t go to the beginning of the `shouldCollectStats()` method, but just before the `contains` check, because we still need to honour the grace period.",
      "parentUuid": "d641be17_a72679c4",
      "range": {
        "startLine": 147,
        "startChar": 11,
        "endLine": 147,
        "endChar": 38
      },
      "revId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c06cc38b_153b9b9c",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/gitrepometrics/GitRepoMetricsConfig.java",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2025-04-10T19:48:25Z",
      "side": 1,
      "message": "This is unrelated: whilst I do understand that using a `Set` would make more sense, however there is no need to change this method at all in this change.\n\nWhen `collectAllRepositories \u003d true` we should use a _shortcut_ and not checking repository names anymore.",
      "range": {
        "startLine": 45,
        "startChar": 9,
        "endLine": 45,
        "endChar": 12
      },
      "revId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f927044f_733fbbf1",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/gitrepometrics/GitRepoMetricsConfig.java",
        "patchSetId": 3
      },
      "lineNbr": 45,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2025-04-11T20:04:02Z",
      "side": 1,
      "message": "I could move this at a higher level, but at some point, we need to explicitly list the repositories we want to collect metrics for.\n\nMetrics collection doesn\u0027t happen just by listening to events for the wanted repositories, but also (if `forceCollection` is enabled), metrics are collected on a scheduled basis, which implies looping through all existing repositories.\n\nWDYT?",
      "parentUuid": "c06cc38b_153b9b9c",
      "range": {
        "startLine": 45,
        "startChar": 9,
        "endLine": 45,
        "endChar": 12
      },
      "revId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d18b515f_4122bffc",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/gitrepometrics/GitRepoMetricsConfig.java",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2025-04-10T19:48:25Z",
      "side": 1,
      "message": "This is *very expensive* and should be avoided here.",
      "range": {
        "startLine": 48,
        "startChar": 14,
        "endLine": 48,
        "endChar": 67
      },
      "revId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8ce71335_c66efffb",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/gitrepometrics/GitRepoMetricsConfig.java",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2025-04-11T20:04:02Z",
      "side": 1,
      "message": "See my previous reply. I believe we must loop through all repositories to gather metrics for all repositories when `forceCollection` is enabled.",
      "parentUuid": "d18b515f_4122bffc",
      "range": {
        "startLine": 48,
        "startChar": 14,
        "endLine": 48,
        "endChar": 67
      },
      "revId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f77a1c3a_3978f028",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/gitrepometrics/GitRepoMetricsConfig.java",
        "patchSetId": 3
      },
      "lineNbr": 48,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2025-04-11T20:04:02Z",
      "side": 1,
      "message": "I can move this to a higher level (without changing the",
      "parentUuid": "d18b515f_4122bffc",
      "range": {
        "startLine": 48,
        "startChar": 14,
        "endLine": 48,
        "endChar": 67
      },
      "revId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "107d7930_cefd1fe0",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/gitrepometrics/GitRepoMetricsConfig.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1006192
      },
      "writtenOn": "2025-04-10T19:48:25Z",
      "side": 1,
      "message": "Why not making this public and leave the consumers of the configuration to adopt a shortcut when all the repositories should be collected?",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 54,
        "endChar": 9
      },
      "revId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bdf9668a_4c2da7f8",
        "filename": "src/main/java/com/googlesource/gerrit/plugins/gitrepometrics/GitRepoMetricsConfig.java",
        "patchSetId": 3
      },
      "lineNbr": 54,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2025-04-11T20:04:02Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "107d7930_cefd1fe0",
      "range": {
        "startLine": 54,
        "startChar": 2,
        "endLine": 54,
        "endChar": 9
      },
      "revId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1e5c3984_fad3d3a5",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/gitrepometrics/GitRepoMetricsCacheIT.java",
        "patchSetId": 3
      },
      "lineNbr": 115,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2025-04-10T12:45:22Z",
      "side": 1,
      "message": "I don\u0027t think this is needed.\nYou should be able to get the `UpdateGitMetricsTask.Factory` from the `sysInjector` this way:\n\n`updateGitMetricsTaskFactory \u003d plugin.getSysInjector().getInstance(UpdateGitMetricsTask.Factory.class);`\n\nSimilarly to what we did for `*MetricsCollector` in the `setUpTestPlugin()` method.",
      "revId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "98b7b789_cf07d711",
        "filename": "src/test/java/com/googlesource/gerrit/plugins/gitrepometrics/GitRepoMetricsCacheIT.java",
        "patchSetId": 3
      },
      "lineNbr": 124,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2025-04-10T12:45:22Z",
      "side": 1,
      "message": "Should this also include All-Users and All-projects?",
      "range": {
        "startLine": 124,
        "startChar": 26,
        "endLine": 124,
        "endChar": 43
      },
      "revId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "At least one maximum vote for label \u0027Code-Review\u0027 is required"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX,user\u003dnon_uploader AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX,user=non_uploader AND -label:Code-Review=MIN"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["label:Code-Review=MAX,user=non_uploader","label:Code-Review=MIN"],"atomExplanations":{"value":{"label:Code-Review=MAX,user=non_uploader":"","label:Code-Review=MIN":""}}}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""],"atomExplanations":{"value":{"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\"":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[],"atomExplanations":{"value":null}}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[],"atomExplanations":{"value":{"has:unresolved":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":["has:unresolved"],"failingAtoms":[],"atomExplanations":{"value":{"has:unresolved":""}}}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["hashtag:allow-unresolved-comments"],"atomExplanations":{"value":{"hashtag:allow-unresolved-comments":""}}}
      },
      "patchSetCommitId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval. Using a trusted device is required, see go/gerrit-onboarding#review-enforcement."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforced_gerrit"],"atomExplanations":{"value":{"is:review-enforced_gerrit":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforcement-satisfied_gerrit"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[],"atomExplanations":{"value":null}}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "CI result status for build and tests is passing"
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "-branch:refs/meta/config"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-branch:refs/meta/config"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["branch:refs/meta/config"],"atomExplanations":{"value":{"branch:refs/meta/config":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"],"atomExplanations":{"value":{"label:Verified=MAX":"","label:Verified=MIN":""}}}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Want-Code-Review-From-All",
        "description": {
          "value": "A \u0027Code-Review\u0027 vote is required from all human reviewers (service users that are reviewers are ignored)."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "footer:\"Want-Code-Review: all\" -label:Code-Review\u003e\u003d1,users\u003dhuman_reviewers"
          }
        },
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003e\u003d1,users\u003dhuman_reviewers"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"footer:\"Want-Code-Review: all\" -label:Code-Review>=1,users=human_reviewers"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["footer:\"Want-Code-Review: all\"","label:Code-Review>=1,users=human_reviewers"],"atomExplanations":{"value":{"footer:\"Want-Code-Review: all\"":"","label:Code-Review>=1,users=human_reviewers":""}}}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review>=1,users=human_reviewers"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[],"atomExplanations":{"value":null}}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f69fc27d0bf2eb23bb740be007410cc1c3a2a2d8",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}